// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  password           String
  createdAt          DateTime @default(now())
  verificationStatus Boolean  @default(false)
  updatedAt          DateTime @updatedAt

  //Relations
  store       Store[]
  sessions    Session[]
  Transaction Transaction[]
}

model Store {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //Social links
  facebook  String?
  twitter   String?
  instagram String?
  youtube   String?
  tiktok    String?
  linkedin  String?
  medium    String?

  //Relations
  owner        User          @relation(fields: [ownerId], references: [id])
  products     Product[]
  transactions Transaction[]

  @@index([ownerId])
}

model Product {
  id          Int      @id @default(autoincrement())
  storeId     Int
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relations
  store       Store         @relation(fields: [storeId], references: [id])
  Transaction Transaction[]

  @@index([storeId])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  storeId   Int
  productId Int
  userId    Int
  amount    Float
  status    Status   @default(failed)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  store   Store   @relation(fields: [storeId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([storeId])
  @@index([productId])
  @@index([userId])
}

enum Status {
  pending
  success
  failed
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
